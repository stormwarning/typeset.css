//
// Internal mixins & functions.
//
// @package Typeset.css
//

//
// Strip units from values.
//
// @access  private
// @param   {str}   $unit A value with a unit
// @example
//     _strip-units(10px);
// @since   0.1.0
//
@function _strip-units($unit) {

  @return $unit / ($unit * 0 + 1);

}

//
// Opentype feature settings.
//
// Fakes "inheritance" of `font-feature-settings` using a baseline settings
// variable.
//
// @access  public
// @param   {list} $feature  A list of tag–value pairs
// @return  {list} $features Updated list of tag–value pairs.
// @example
//     .class {
//       font-feature-settings: opentype("kern" 1);
//     }
// @since   0.1.0
//
@function opentype($feature...) {

  $features: $typ-ot-base;

  @if length($feature) > 0 {

    @each $pair in $feature {

      $tag: nth($pair, 1);
      $nth: index($typ-ot-base, $tag 0) or index($typ-ot-base, $tag 1);

      // Setting exists so modify the value.
      @if type-of($nth) == number {

        $step: ();

        @if $nth > 1 {

          @for $i from 1 through $nth - 1 {

            $step: append($step, nth($features, $i), comma);

          }

        }

        @if $nth < length($features) {

          @for $i from $nth + 1 through length($features) {

            $step: append($step, nth($features, $i), comma);

          }

        }

        $features: $step;

      }

      // Setting not already in list so add it.
      @else {

        $features: append($features, $pair);

      }

    }

  }

  @return $features;

}

//
// Font-size & line-height.
//
// Generates a rem-based font-size with pixel value fallback, as well as a
// unitless line-height, based on base font settings.
//
// @example
//     .class {
//       @include typ-font-size(12px);
//     }
// @since   0.1.0
//
@mixin typ-font-size($font-size, $line-height: auto) {

  font-size: $font-size;
  font-size: ($font-size / $typ-font-size) * 1rem;

  @if $line-height == auto {

    line-height: ceil($font-size / $typ-line-height) * ($typ-line-height / $font-size);

  } @else {

    @if (type-of($line-height) == number or $line-height == inherit or $line-height == normal) {

      line-height: $line-height;

    } @elseif ($line-height != none and $line-height != false) {

      @warn "✘ ‘#{$line-height}’ is not a valid value for `line-height`.";

    }

  }

}

//
// Font-size with calc() & vw units.
//
// @param {str} $min-font    Minimum font-size
// @param {str} $max-font    Maximum font-size
// @param {str} $min-width   Minimum browser width
// @param {str} $max-width   Maximum browser width
// @param {int} $min-leading Minimum line-height
// @param {int} $max-leading Maximum line-height
// @since 0.1.0
//
@mixin typ-calc-size($min-font, $max-font, $min-width, $max-width, $min-leading: auto, $max-leading: auto) {

  $_min-font:  _strip-units($min-font);
  $_max-font:  _strip-units($max-font);
  $_min-width: _strip-units($min-width);
  $_max-width: _strip-units($max-width);

  font-size: $min-font;

  @if ($min-leading != auto and type-of($min-leading) == number) {
    line-height: $min-leading;
  }

  @media (min-width: $min-width) {
    font-size: calc(#{$min-font} + (#{$_max-font} - #{$_min-font}) * ((100vw - #{$min-width}) / (#{$_max-width} - #{$_min-width})));

    @if ($min-leading != auto and type-of($min-leading) == number) {
      line-height: calc(#{$min-leading} + (#{$max-leading} - #{$min-leading}) * ((100vw - #{$min-width}) / (#{$_max-width} - #{$_min-width})));
    }
  }

  @media (min-width: $max-width) {
    font-size: $max-font;

    @if ($max-leading != auto and type-of($max-leading) == number) {
      line-height: $max-leading;
    }
  }

}

//
// Easy tracking control.
//
// Enter tracking values from Photoshop mockups and convert to something CSS
// understands as a `letter-spacing` value.
//
// @param   {int} $val Value (negative or positive) to adjust tracking
// @example
//     .class {
//       @include typ-tracking(-50);
//     }
// @since   0.3.0
//
@mixin typ-tracking($val) {

  @if type-of($val) == number {

    letter-spacing: ($val / 1000) * 1em;

  } @else {

    @warn "✘ ‘#{$val}’ is not a number value.";

  }

}

//
// Comfortable measure.
//
// @link  http://tympanus.net/codrops/css_reference/hyphens/
// @since 0.4.0
//
@mixin typ-measure($max: 70, $min) {

  max-width: $max * 1ch;
  hyphenate-limit-chars: 6 3 2;
  hyphenate-limit-lines: 3;
  hyphens: auto;
  word-break: break-word;

  @if type-of($min) == number {

    min-width: $min * 1ch;

  } @elseif $min != null {

    @warn "✘ ‘#{$min}’ is not a valid value.";

  }

}
